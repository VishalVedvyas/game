{"version":3,"sources":["Square.js","api.js","NavigationBar.js","CustomModal.js","App.js","serviceWorker.js","index.js"],"names":["Square","react_default","a","createElement","className","onClick","this","props","value","React","Component","socket","openSocket","updateServerState","obj","emit","NavigationBar","_this","handle","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleState","bind","assertThisInitialized","state","gameRooms","array","on","status","_this2","role","arrayValues","map","x","setState","handleModal","_this3","react_sidenav_lib_default","style","background","fontFamily","onSelect","selected","setGameRole","Toggle","Nav","defaultSelected","react_sidenav_lib","eventKey","fontSize","CustomModal","handleShow","handleClose","showModal","Modal","show","onHide","Body","message","react_select_esm","selectedOption","onChange","setSelectedOption","options","Footer","Button","bsStyle","setGameId","App","cb","fun","gameRegisterHandle","values","Array","fill","isXNext","gameRole","gameId","gameKeys","modalMessage","tableValues","console","log","prevGameKey","leaveRoom","key","i","modifiedValuesArray","slice","gameKey","leaveGameEvent","registerGameOnServer","src_Square","handleClick","winningLines","length","_winningLines$i","slicedToArray","b","c","div","_this4","winner","calculateWinner","leaveGame","src_NavigationBar","handleModalState","particles_default","src_CustomModal","setModalSelectOption","renderSquare","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24451a58.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Square extends React.Component {\n    render() {\n        return (\n          <button className=\"square\" onClick={this.props.onClick}>\n              { this.props.value }\n          </button>\n        );\n    }\n}\n\nexport default Square;","import openSocket from 'socket.io-client';\nconst  socket = openSocket('http://localhost:8000');\n\nfunction fetchGameState(cb) {\n    console.log('Initial table values recieved', socket);\n    socket.on('setTableValues', (obj) => cb(obj.values, obj.isXNext));\n    // socket.emit('subscribeToTimer', 1000);\n}\n\nfunction updateServerState(obj) {\n    socket.emit('updateTableValues', obj);\n}\n\nfunction getGameRoomsStatus(role) {\n    socket.emit('getGameRoomsStatus', role);\n}\n\nfunction registerGameOnServer(obj) {\n    socket.emit('gameSetup', obj);\n}\n\nfunction leaveGameEvent(obj) {\n    socket.emit('leaveGame', obj);\n}\n\nfunction endGameEvent(fun) {\n    socket.on('endGame', (key) => fun(key));\n}\n\nfunction leaveRoom(prevGameKey) {\n    socket.emit('leaveRoom', prevGameKey);\n}\n\nfunction setGameRoomsStatus(handle) {   //data received should contain array and role too!\n    socket.on('setGameRoomsStatus', status => handle(status));\n}\n\nexport { fetchGameState, updateServerState, getGameRoomsStatus, setGameRoomsStatus, registerGameOnServer, leaveGameEvent, endGameEvent, leaveRoom };","import React, { Component } from 'react';\nimport { getGameRoomsStatus, setGameRoomsStatus } from './api';\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport '@trendmicro/react-sidenav/dist/react-sidenav.css';\n\n// const options = [\n//     { value: 'chocolate', label: 'Chocolate' },\n//     { value: 'strawberry', label: 'Strawberry' },\n//     { value: 'vanilla', label: 'Vanilla' }\n// ];\n\nclass NavigationBar extends Component {\n    constructor(props) {\n        super(props);\n        this.handleState = this.handleState.bind(this);\n        this.state = {\n            gameRooms: []\n        };\n        setGameRoomsStatus((array) => this.handleState(array));\n    }\n\n    handleState(status) {\n        let role = status.role;\n        let gameRooms = status.arrayValues.map(x => {\n            let obj={};\n            obj['label'] = x;\n            obj['value'] = x;\n            return obj;\n        });\n        this.setState({gameRooms}, () => {\n            if (role === 'host')\n            {\n                this.props.handleModal(true, 'Choose a game room to host!', this.state.gameRooms);\n            }\n            else if (role === 'tenant')\n            {\n                this.props.handleModal(true, 'Choose a game room to join and play!', this.state.gameRooms);\n            }\n            else if (role === 'viewer')\n            {\n                this.props.handleModal(true, 'Choose a game room to view game!', this.state.gameRooms);\n            }\n        });\n    }\n\n    render() {\n        const navigationBar = {\n            background: '#424242',\n            fontFamily: 'monospace'\n        };\n        return (\n            <div>\n                <SideNav style={navigationBar}\n                         onSelect={(selected) => {\n                             getGameRoomsStatus(selected);\n                             this.props.setGameRole(selected);\n                         }}\n                >\n                    <SideNav.Toggle />\n                    <SideNav.Nav defaultSelected=\"home\">\n                        <NavItem eventKey=\"home\">\n                            <NavIcon>\n                                <i className=\"fa fa-fw fa-home\" style={{ fontSize: '1.75em' }} />\n                            </NavIcon>\n                            <NavText>\n                                Home\n                            </NavText>\n                        </NavItem>\n                        <NavItem eventKey=\"host\">\n                            <NavIcon>\n                                <i className=\"fa fa-fw fa-server\" style={{ fontSize: '1.75em' }} />\n                            </NavIcon>\n                            <NavText>\n                                Host Game\n                            </NavText>\n                        </NavItem>\n                        <NavItem eventKey=\"tenant\">\n                            <NavIcon>\n                                <i className=\"fa fa-fw fa-user-plus\" style={{ fontSize: '1.75em' }} />\n                            </NavIcon>\n                            <NavText>\n                                Join Game\n                            </NavText>\n                        </NavItem>\n                        <NavItem eventKey=\"viewer\">\n                            <NavIcon>\n                                <i className=\"fa fa-fw fa-eye\" style={{ fontSize: '1.75em' }} />\n                            </NavIcon>\n                            <NavText>\n                                Watch Game\n                            </NavText>\n                        </NavItem>\n                    </SideNav.Nav>\n                </SideNav>\n            </div>\n        );\n    }\n}\n\nexport default NavigationBar;\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport { Modal, Button } from 'react-bootstrap';\n\nclass CustomModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleShow = this.handleShow.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n\n        // this.state = {\n        //     selectedOption: null\n        // };\n    }\n\n    handleClose() {\n        this.props.showModal(false);\n    }\n\n    handleShow() {\n        this.props.showModal(true);\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal show={this.props.show} onHide={this.handleClose}>\n                    {/*<Modal.Header closeButton>*/}\n                        {/*<Modal.Title>Modal heading</Modal.Title>*/}\n                    {/*</Modal.Header>*/}\n                    <Modal.Body>\n                        {/*<h4>Text in a modal</h4>*/}\n                        <p>\n                            {this.props.message}\n                        </p>\n                        <Select\n                            value={this.props.selectedOption}\n                            onChange={(selectedOption) => { this.props.setSelectedOption(selectedOption); }}\n                            // value={this.state.selectedOption}\n                            // onChange={(selectedOption) => { this.setState(selectedOption); }}\n                            options={this.props.options}\n                        />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle=\"primary\" onClick={() => {\n                            this.props.setGameId(this.props.selectedOption.value);\n                            // this.props.registerGameOnServer();\n                        }}>Save</Button>\n                        <Button onClick={this.handleClose}>Close</Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CustomModal;","import React, { Component } from 'react';\nimport Square from './Square';\nimport Particles from 'react-particles-js';\nimport { fetchGameState, updateServerState, registerGameOnServer, leaveGameEvent, endGameEvent, leaveRoom } from './api';\nimport './App.css';\nimport NavigationBar from \"./NavigationBar\";\nimport CustomModal from './CustomModal';\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.gameRegisterHandle = this.gameRegisterHandle.bind(this);\n        this.state = {\n          values: Array(9).fill(null),\n          isXNext: true,\n\n          selectedOption: null, //To keep account of the option chosen in a Modal\n\n          gameRole: null,   //game state\n          gameId: null, //to find game state\n\n          showModal: false,   //these are modal states from here\n          gameKeys: [],\n          modalMessage: 'Default message',\n        };\n        fetchGameState((tableValues, isXNext) => this.setState({\n            values: tableValues,\n            isXNext: isXNext\n        }));\n        endGameEvent((prevGameKey) => {\n            this.setState({\n                values: Array(9).fill(null),\n                isXNext: true,\n\n                selectedOption: null,\n\n                gameRole: null,\n                gameId: null,\n\n                showModal: false,\n                gameKeys: [],\n                modalMessage: 'Default message',\n            });\n            leaveRoom(prevGameKey);    //After all the states are reset - Leave room\n        });\n    }\n\n    handleClick(i) {\n        let role = this.state.gameRole;\n        if (role === 'host' && this.state.isXNext)\n        {\n            const modifiedValuesArray = this.state.values.slice();\n            modifiedValuesArray[i] = 'X';\n            this.setState({\n                values: modifiedValuesArray,\n            });\n            let obj = {\n                gameKey: this.state.gameId,\n                arrayValues: modifiedValuesArray,\n                gameRole: role\n            };\n            updateServerState(obj);\n        }\n        else if (role === 'tenant' && !(this.state.isXNext))\n        {\n            const modifiedValuesArray = this.state.values.slice();\n            modifiedValuesArray[i] = 'O';\n            this.setState({\n                values: modifiedValuesArray,\n            });\n            let obj = {\n                gameKey: this.state.gameId,\n                arrayValues: modifiedValuesArray,\n                gameRole: role\n            };\n            updateServerState(obj);\n        }\n        // const modifiedValuesArray = this.state.values.slice();\n        // // modifiedValuesArray[i] = this.state.isXNext ? 'X' : 'O';\n        // modifiedValuesArray[i] = this.state.isXNext ? 'X' : 'O';\n        // this.setState({\n        //     values: modifiedValuesArray,\n        //     isXNext: !this.state.isXNext\n        // });\n        // let obj = {\n        //     arrayValues: modifiedValuesArray\n        // };\n        // updateServerState(obj);\n    }\n\n    handleModalState(show, message, options) {\n        this.setState({\n            showModal: show,\n            gameKeys: options,\n            modalMessage: message\n        });\n    }\n\n    setGameId(selectedOption) {\n        this.setState({ gameId: selectedOption }, () => {this.gameRegisterHandle()});\n    }\n\n    setModalSelectOption(selectedOption) {\n        this.setState({selectedOption});\n    }\n\n    setGameRole(role) {\n        this.setState({\n            gameRole: role\n        });\n    }\n\n    leaveGame(){\n        let obj = {\n            gameKey: this.state.gameId,\n            gameRole: this.state.gameRole\n        };\n        leaveGameEvent(obj);\n    }\n\n    showModal(show) {\n        this.setState({showModal: show});\n    }\n\n    gameRegisterHandle() {\n        let obj={\n            gameKey: this.state.gameId,\n            role: this.state.gameRole\n        };\n        registerGameOnServer(obj);\n    }\n\n    renderSquare(i) {\n        return (\n          <Square value = { this.state.values[i] } onClick = { () => this.handleClick(i) }/>\n        );\n    }\n\n    calculateWinner(values) {\n        const winningLines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n        for (let i = 0; i < winningLines.length; i++) {\n            const [a, b, c] = winningLines[i];\n            if (values[a] && values[a] === values[b] && values[a] === values[c]) {\n                return values[a];\n            }\n        }\n        return null;\n    }\n\n    render() {\n        const winner = this.calculateWinner(this.state.values);\n        console.log(this.state);\n        let div;\n        if(this.state.gameId) {\n            div = <button className=\"btn-primary leaveButton\" onClick={() => this.leaveGame()}>Leave Game</button>;\n        } else {\n            div = <NavigationBar handleModal={(show, message, options) => this.handleModalState(show, message, options)}\n                                 setGameRole={(role) => this.setGameRole(role)}\n            />;\n        }\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row content\">\n                    <div className=\"col-sm-12 App\">\n                        <Particles/>\n                        {/*<NavigationBar handleModal={(show, message, options) => this.handleModalState(show, message, options)}*/}\n                                       {/*setGameRole={(role) => this.setGameRole(role)}*/}\n                        {/*/>*/}\n                        {div}\n                        <CustomModal show={this.state.showModal} options={this.state.gameKeys} message={this.state.modalMessage} selectedOption={this.state.selectedOption}\n                                     setGameId={(selectedOption) => this.setGameId(selectedOption)}\n                                     setSelectedOption={(selectedOption) => this.setModalSelectOption(selectedOption)} showModal={(show) => this.showModal(show)}\n                                     registerGameOnServer={() => this.gameRegisterHandle()}\n                        />\n                        <div className=\"containment\">\n                            <div className=\"status\">{winner ? \"Winner \" + winner : this.state.isXNext ? \"X's turn!\" : \"O's turn!\"}</div>\n                            <div className={\"board-row\"}>\n                                {this.renderSquare(0)}\n                                {this.renderSquare(1)}\n                                {this.renderSquare(2)}</div>\n                            <div className={\"board-row\"}>\n                                {this.renderSquare(3)}\n                                {this.renderSquare(4)}\n                                {this.renderSquare(5)}</div>\n                            <div className={\"board-row\"}>\n                                {this.renderSquare(6)}\n                                {this.renderSquare(7)}\n                                {this.renderSquare(8)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}